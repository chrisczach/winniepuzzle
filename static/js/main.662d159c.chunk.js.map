{"version":3,"sources":["board/board.module.css","tile/tile.module.css","logo.svg","board/board.js","tile/tile.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","board","tile","load","__webpack_require__","p","Board","props","grid","grid-template-columns","gridSize","grid-template-rows","react_default","a","createElement","style","className","classes","children","Tile","row","Math","floor","index","boardSize","column","size","offSetRow","imageRow","offSetColumn","imageColumn","imageSize","image","grid-column","toString","grid-row","background-image","background-size","background-position","blank","onClick","e","clickHandler","images","id","item","updateAvailableMovesUtility","state","currIndex","findIndex","possibleMoves","push","length","Object","objectSpread","moveTileUtility","indexOf","_ref","moveHistory","toConsumableArray","concat","checkBoardUtility","win","forEach","i","setBoardUtility","openSpot","pow","newGameUtility","numTiles","numMoves","random","moves","currGame","randomizeBoardUtility","_loop","lastMove","App","tileSize","setTile","_this","setState","min","window","innerHeight","innerWidth","setBoard","updateAvailableMoves","moveTile","checkBoard","newGame","this","addEventListener","removeEventListener","_this2","board_board","map","assign","Component","Boolean","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"gFACAA,EAAAC,QAAA,CAAkBC,MAAA,uCCAlBF,EAAAC,QAAA,CAAkBE,KAAA,mBAAAC,KAAA,gGCDlBJ,EAAAC,QAAiBI,EAAAC,EAAuB,wNCezBC,EAZD,SAACC,GACb,IAAMC,EAAO,CACXC,wBAAyB,UAAYF,EAAMG,SAAW,SACtDC,qBAAsB,UAAYJ,EAAMG,SAAW,UAErD,OACEE,EAAAC,EAAAC,cAAA,OAAKC,MAAOP,EAAMQ,UAAWC,IAAQhB,OACpCM,EAAMW,2BC0BIC,EAjCF,SAAAZ,GACX,IAAMa,EAAMC,KAAKC,OAAOf,EAAMgB,MAAQ,GAAKhB,EAAMiB,WAAa,EACxDC,EAAUlB,EAAMgB,MAAUhB,EAAMiB,YAAe,EAAIjB,EAAMiB,UAAajB,EAAMgB,MAAUhB,EAAMiB,UAC5FE,EAAOnB,EAAMmB,KACbC,EAAYD,EAAQA,EAAOnB,EAAMqB,SACjCC,EAAeH,EAAQA,EAAOnB,EAAMuB,YACpCC,EAAYL,EAAOnB,EAAMiB,UAEzBQ,EAAQ,CACZC,cAAeR,EAAOS,WACtBC,WAAYf,EAAIc,WAChBE,mBAAoB,cAAgB7B,EAAMyB,MAAME,WAAa,KAC7DG,kBAAmBN,EAAUG,WAAa,MAAQH,EAAUG,WAAa,KACzEI,sBAAuBT,EAAaK,WAAa,MAAQP,EAAUO,WAAa,MAG5EK,EAAQ,CACZN,cAAeR,EAAOS,WACtBC,WAAYf,EAAIc,YAMlB,OACEtB,EAAAC,EAAAC,cAAA,OAAK0B,QAAS,SAAAC,GAAC,OAAGlC,EAAMmC,aAAanC,EAAMgB,MAAOkB,IAAK1B,MAA0B,MAAnBR,EAAMqB,SAAmBW,EAAQP,EAAOhB,UAAWC,IAAQf,QCpBvHyC,EAAS,CACb,CAAEC,GAAI,EAAGC,KAAM,eACf,CAAED,GAAI,EAAGC,KAAM,eACf,CAAED,GAAI,EAAGC,KAAM,eACf,CAAED,GAAI,EAAGC,KAAM,eACf,CAAED,GAAI,EAAGC,KAAM,eACf,CAAED,GAAI,EAAGC,KAAM,eACf,CAAED,GAAI,EAAGC,KAAM,eACf,CAAED,GAAI,EAAGC,KAAM,eACf,CAAED,GAAI,EAAGC,KAAM,eACf,CAAED,GAAI,GAAIC,KAAM,gBAChB,CAAED,GAAI,GAAIC,KAAM,gBAChB,CAAED,GAAI,GAAIC,KAAM,iBAGZC,EAA8B,SAACC,GACjC,IAAMC,EAAYD,EAAM9C,MAAMgD,UAAU,SAAAR,GAAC,MAAkB,MAAfA,EAAEb,WACxCsB,EAAgB,GAKtB,OAJKF,EAAY,GAAKD,EAAMvB,YAAc,GAAG0B,EAAcC,KAAKH,EAAY,GACxEA,EAAYD,EAAMvB,YAAc,GAAG0B,EAAcC,KAAKH,EAAY,GAClEA,EAAYD,EAAMvB,WAAa,GAAG0B,EAAcC,KAAKH,EAAYD,EAAMvB,WACvEwB,EAAYD,EAAMvB,UAAYuB,EAAM9C,MAAMmD,QAAQF,EAAcC,KAAKH,EAAYD,EAAMvB,WACpF6B,OAAAC,EAAA,EAAAD,CAAA,GAAIN,EAAX,CAAkBG,mBAGhBK,EAAkB,SAACR,EAAOxB,GAE9B,IAAMyB,EAAYD,EAAM9C,MAAMgD,UAAU,SAAAR,GAAC,MAAmB,MAAfA,EAAEb,WAC/C,IAAgD,IAA5CmB,EAAMG,cAAcM,QAAQjC,EAAQ,GAAxC,CACA,IAAMtB,EAAQ8C,EAAM9C,MAJoBwD,EAKD,CAACxD,EAAM+C,GAAY/C,EAAMsB,EAAQ,IAAvEtB,EAAMsB,EAAQ,GALyBkC,EAAA,GAKrBxD,EAAM+C,GALeS,EAAA,GAMxC,IAAMC,EAAWL,OAAAM,EAAA,EAAAN,CAAON,EAAMW,aAAbE,OAAA,CAA0BZ,IAO3C,OALAD,EAAKM,OAAAC,EAAA,EAAAD,CAAA,GAAON,EAAP,CAAc9C,QAAOyD,gBAE1BX,EAAQc,EAAkBd,GAC1BA,EAAQD,EAA4BC,KAKhCc,EAAoB,SAACd,GACzB,IAAIe,GAAM,EAKV,OAJAf,EAAM9C,MAAM8D,QAAQ,SAACtB,EAAGuB,IACFvB,EAAEb,SAAW,GAAKmB,EAAMvB,WAAciB,EAAEX,YAAc,KACxDkC,GAAoB,MAAfvB,EAAEb,WAAoBkC,GAAM,KAE9CT,OAAAC,EAAA,EAAAD,CAAA,GAAIN,EAAX,CAAkBe,SAGdG,EAAkB,SAAClB,GAEvB,IADA,IAAM9C,EAAQ,GACL2B,EAAW,EAAGA,GAAYmB,EAAMvB,UAAWI,IAClD,IAAK,IAAIE,EAAc,EAAGA,GAAeiB,EAAMvB,UAAWM,IACpDA,IAAgBiB,EAAMvB,WAAaI,IAAamB,EAAMvB,UACxDvB,EAAMkD,KAAK,CAAEvB,SAAU,IAAKE,YAAa,MAEzC7B,EAAMkD,KAAK,CAAEvB,WAAUE,gBAK7B,OAAOuB,OAAAC,EAAA,EAAAD,CAAA,GAAIN,EAAX,CAAkB9C,QAAOiE,SAAU7C,KAAA8C,IAAApB,EAAMvB,UAAa,GAAI,KAItD4C,EAAiB,SAACrB,EAAMsB,EAAUC,GACtC,IAAMtC,EAAQW,EAAOtB,KAAKC,MAAMD,KAAKkD,SAAW5B,EAAOS,SAASP,KAE1D2B,EAAQF,EACR9C,EAAY6C,EAElB,OAAOhB,OAAAC,EAAA,EAAAD,CAAA,GAAIN,EAAX,CAAkBf,QAAO8B,KAJb,EAIkBU,QAAOhD,YAAWiD,UAD/B,KAIbC,EAAwB,SAAC3B,EAAOuB,GACpC,IADiD,IAAAK,EAAA,SACxCX,GACP,IAAMQ,EAAQzB,EAAMG,cACd0B,EAAW7B,EAAMW,YAAYX,EAAMW,YAAYN,OAAS,GAO9DL,EAAQQ,EAAgBR,EANX,SAAP7C,IACJ,OAAIsE,EAAMnD,KAAKC,MAAMD,KAAKkD,SAAWC,EAAMpB,WAAawB,EAC/C1E,IACOsE,EAAMnD,KAAKC,MAAMD,KAAKkD,SAAWC,EAAMpB,SAG1BlD,GAAS,GACxC6C,EAAQc,EAAkBd,GAC1BA,EAAQD,EAA4BC,IAX7BiB,EAAI,EAAGA,EAAe,GAAXM,EAAeN,IAAKW,IAexC,OAAO5B,GAwFM8B,6MAlFb9B,MAAQ,CACNf,MAAO,cACP8C,SAAU,GACV5B,cAAe,GACfQ,YAAa,GACblC,UAAW,EACXvB,MAAO,GACPiE,SAAU,EACVJ,KAAK,KAIPiB,QAAU,WACRC,EAAKC,SAAS,SAAAlC,GACZ,MAAO,CAAE+B,SAA0D,IAAhDzD,KAAK6D,IAAIC,OAAOC,YAAaD,OAAOE,YAAkBtC,EAAMvB,gBAInF8D,SAAW,WACTN,EAAKC,SAAS,SAAAlC,GAKZ,OAJAA,EAAQkB,EAAgBlB,GACxBA,EAAQD,EAA4BC,QAOxCwC,qBAAuB,WACrBP,EAAKC,SAAS,SAAAlC,GAAK,OAAID,EAA4BC,QAIrDyC,SAAW,SAACjE,EAAOkB,GACjBuC,EAAKC,SAAS,SAAAlC,GAEZ,OADAA,EAAQQ,EAAgBR,EAAOxB,QAKnCkE,WAAa,WACXT,EAAKC,SAAS,SAAAlC,GAAK,OAAGc,EAAkBd,QAG1C2C,QAAU,SAACrB,EAAUC,GACnBU,EAAKC,SAAS,SAAAlC,GAKZ,OAJAA,EAAQqB,EAAerB,EAAOsB,EAAUC,GACxCvB,EAAQkB,EAAgBlB,GACxBA,EAAQD,EAA4BC,GACpCA,EAAQ2B,EAAsB3B,EAAOuB,yFAavCqB,KAAKD,QAAQ,EAAG,GAChBC,KAAKZ,UACLI,OAAOS,iBAAiB,SAAUD,KAAKZ,wDAIvCI,OAAOU,oBAAoB,SAAUF,KAAKZ,0CAInC,IAAAe,EAAAH,KACP,OACE/E,EAAAC,EAAAC,cAACiF,EAAD,CAAOrF,SAAUiF,KAAK5C,MAAMvB,WACzBmE,KAAK5C,MAAM9C,MAAM+F,IAAI,SAACvD,EAAGuB,GAAJ,OAAUpD,EAAAC,EAAAC,cAACZ,EAADmD,OAAA4C,OAAA,CAAMvD,aAAcoD,EAAKN,UAAe/C,EAAxC,CAA2CT,MAAO8D,EAAK/C,MAAMf,MAAOR,UAAWsE,EAAK/C,MAAMvB,UAAWD,MAAOyC,EAAI,EAAGtC,KAAMoE,EAAK/C,MAAM+B,sBA5E1JoB,aC5FEC,QACW,cAA7BhB,OAAOiB,SAASC,UAEe,UAA7BlB,OAAOiB,SAASC,UAEhBlB,OAAOiB,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO5F,EAAAC,EAAAC,cAAC2F,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.662d159c.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"board\":\"board_board__16f6O\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"tile\":\"tile_tile__rCIb0\",\"load\":\"tile_load__2STJf\"};","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { Component } from 'react';\nimport classes from './board.module.css';\n\nconst Board = (props) => {\n  const grid = {\n    \"grid-template-columns\": 'repeat(' + props.gridSize + ', 1fr)',\n    \"grid-template-rows\": 'repeat(' + props.gridSize + ', 1fr)'\n  };\n  return (\n    <div style={grid} className={classes.board}>\n    {props.children}\n    </div>\n)\n}\n\nexport default Board","import React, { Component } from 'react';\nimport classes from './tile.module.css';\n\nconst Tile = props => {\n  const row = Math.floor((props.index - 1) / props.boardSize) + 1;\n  const column = (props.index) % (props.boardSize) === 0 ? props.boardSize : (props.index) % (props.boardSize);\n  const size = props.size;\n  const offSetRow = size - (size * props.imageRow);\n  const offSetColumn = size - (size * props.imageColumn);\n  const imageSize = size * props.boardSize;\n  \n  const image = {\n    \"grid-column\": column.toString(),\n    \"grid-row\": row.toString(),\n    \"background-image\": 'url(\"./img/' + props.image.toString() + '\")',\n    \"background-size\": imageSize.toString() + 'px ' + imageSize.toString() + 'px',\n    \"background-position\": offSetColumn.toString() + 'px ' + offSetRow.toString() + 'px'\n  };\n\n  const blank = {\n    \"grid-column\": column.toString(),\n    \"grid-row\": row.toString(),\n    // \"background-image\": 'url(\"./img/' + props.image.toString() + '\")',\n    // \"background-size\": imageSize.toString() + 'px ' + imageSize.toString() + 'px',\n    // \"background-position\": offSetColumn.toString() + 'px ' + offSetRow.toString() + 'px'\n  };\n\n  return (\n    <div onClick={e=> props.clickHandler(props.index, e)}  style={props.imageRow === 'X' ? blank : image} className={classes.tile}>\n\n\n    </div>\n  )\n}\n\n\nexport default Tile","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Board from './board/board';\nimport Tile from './tile/tile';\n\n//`./img/${props.item.item}`\n\nconst images = [\n  { id: 1, item: 'winnie1.jpg' },\n  { id: 2, item: 'winnie2.jpg' },\n  { id: 3, item: 'winnie3.jpg' },\n  { id: 4, item: 'winnie4.jpg' },\n  { id: 5, item: 'winnie5.jpg' },\n  { id: 6, item: 'winnie6.jpg' },\n  { id: 7, item: 'winnie7.jpg' },\n  { id: 8, item: 'winnie8.jpg' },\n  { id: 9, item: 'winnie9.jpg' },\n  { id: 10, item: 'winnie10.jpg' },\n  { id: 11, item: 'winnie11.jpg' },\n  { id: 12, item: 'winnie12.jpg' }\n];\n\nconst updateAvailableMovesUtility = (state) => {\n    const currIndex = state.board.findIndex(e=> e.imageRow === 'X');\n    const possibleMoves = [];\n    if ((currIndex + 1 )% state.boardSize !== 0) possibleMoves.push(currIndex + 1)\n    if (currIndex % state.boardSize !== 0) possibleMoves.push(currIndex - 1)\n    if (currIndex - state.boardSize >= 0) possibleMoves.push(currIndex - state.boardSize)\n    if (currIndex + state.boardSize < state.board.length) possibleMoves.push(currIndex + state.boardSize)\n    return {...state, possibleMoves}\n}\n\nconst moveTileUtility = (state, index) => {\n  \n  const currIndex = state.board.findIndex(e => e.imageRow === 'X')\n  if (state.possibleMoves.indexOf(index - 1) === -1) return\n  const board = state.board;\n  [board[index - 1], board[currIndex]] = [board[currIndex], board[index - 1]];\n  const moveHistory = [...state.moveHistory, currIndex];\n\n  state = {...state, board, moveHistory}\n\n  state = checkBoardUtility(state);\n  state = updateAvailableMovesUtility(state);\n\n  return state;\n}\n\nconst checkBoardUtility = (state) => {\n  let win = true;\n  state.board.forEach((e, i) => {\n    const homeIndex = ((e.imageRow - 1) * state.boardSize) + (e.imageColumn - 1);\n    if (homeIndex !== i && e.imageRow !== 'X') { win = false }\n  });\n  return {...state, win};\n}\n\nconst setBoardUtility = (state) => {\n  const board = [];\n  for (let imageRow = 1; imageRow <= state.boardSize; imageRow++) {\n    for (let imageColumn = 1; imageColumn <= state.boardSize; imageColumn++) {\n      if (imageColumn === state.boardSize && imageRow === state.boardSize) {\n        board.push({ imageRow: 'X', imageColumn: 'X' })\n      } else {\n        board.push({ imageRow, imageColumn });\n      }\n      \n    }\n  }\n  return {...state, board, openSpot: state.boardSize ** 2 - 1 }\n\n}\n\nconst newGameUtility = (state,numTiles, numMoves) => {\n  const image = images[Math.floor(Math.random() * images.length)].item;\n  const win = false;\n  const moves = numMoves;\n  const boardSize = numTiles;\n  const currGame = true;\n  return {...state, image, win, moves, boardSize, currGame}\n}\n\nconst randomizeBoardUtility = (state, numMoves) => {\n  for (let i = 0; i < numMoves * 10; i++) {\n    const moves = state.possibleMoves;\n    const lastMove = state.moveHistory[state.moveHistory.length - 1];\n    const tile = () => {\n      if (moves[Math.floor(Math.random() * moves.length)] === lastMove) {\n        return tile()\n      } else { return moves[Math.floor(Math.random() * moves.length)] }\n    }\n  \n    state = moveTileUtility(state, tile() + 1);\n    state = checkBoardUtility(state);\n    state = updateAvailableMovesUtility(state);\n\n  }\n\n  return state\n\n\n}\n\nclass App extends Component {\n  state = {\n    image: 'winnie1.jpg',\n    tileSize: '',\n    possibleMoves: [],\n    moveHistory: [],\n    boardSize: 4,\n    board: [],\n    openSpot: 0,\n    win: false\n  \n  };\n\n  setTile = () => {\n    this.setState(state=> {\n      return { tileSize: Math.min(window.innerHeight, window.innerWidth)*.98 / state.boardSize }\n    });\n  };\n\n  setBoard = () => {\n    this.setState(state => {\n      state = setBoardUtility(state);\n      state = updateAvailableMovesUtility(state);\n\n\n      return state;\n    })\n  }\n\n  updateAvailableMoves = () => {\n    this.setState(state => updateAvailableMovesUtility(state))\n    \n  }\n\n  moveTile = (index, e) => {\n    this.setState(state => {\n      state = moveTileUtility(state, index);\n      return state\n    });\n  }\n\n  checkBoard = () => {\n    this.setState(state=> checkBoardUtility(state));\n  }\n\n  newGame = (numTiles, numMoves) => {\n    this.setState(state => {\n      state = newGameUtility(state, numTiles, numMoves);\n      state = setBoardUtility(state);\n      state = updateAvailableMovesUtility(state);\n      state = randomizeBoardUtility(state, numMoves);\n      return state\n      });\n  };\n\n\n\n \n\n\n\n\n  componentDidMount() {\n    this.newGame(4, 4);\n    this.setTile();\n    window.addEventListener('resize', this.setTile);\n  }\n\n  componentWillUnmount() {\n    window.removeEventListener('resize', this.setTile);\n\n  }\n\n  render() {\n    return (\n      <Board gridSize={this.state.boardSize}>\n        {this.state.board.map((e, i) => <Tile clickHandler={this.moveTile}  {...e} image={this.state.image} boardSize={this.state.boardSize} index={i + 1} size={this.state.tileSize}/>)}\n      </Board>\n\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}